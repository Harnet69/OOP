
Шпора по ООП:
$name = new <имя>(); - new - создание объекта(сущности, экземпляра класса)
__CLASS__ - псевдоконстанта, размещённая в методе, вернёт вернёт "Класс"
__METHOD__  псевдоконстанта, размещённая в методе, вернёт "Класс:метод"
function __construct (){} - конструктор (функция), который запускается при создании объекта класса
function __dectruct(){} - деструктор, который запускается при удалении объекта
$newobj = clone $obj; - клонирование объекта (конструктор не запускается)
	если необходимо при клонировании запускать конструктор - в класс добавляем метод function __clone(){} 
	
Переопределение методов
parent:: <родительский метод> - размещённый в методе наследника
	добавить ещё один аргумент в __construct
	function __construct ($a, $b, $c, $d){
	parent:: __construct($a, $b, $c);
	this-><name> = $d;
	}
	
Модификаторы доступа к свойствам и методам класса :
- public(видимость глобальная, из наследника и из родителя)
- protected(видимость из наследника и из родителя)
- private (видимость из родителя).
_<свойство или метод> - у защищённого метода (свойства) имя начинается с подчёркивания

Обработка исключений (ошибки, которые не должны приводить к остановке выполнения кода) :
- try {
 throw new Exception("сообщение") - проброс исключения в catch, между ними код игнорится;
<?
	try {
	$a = 1;
	$b = 0;	
		if ($b ==0){
			throw new Exception ("на ноль делить нельзя!<br>");
		}
		$c = $a/$b;
	}
	catch (Exception $e){
		echo "Ошибка : ".$e->GetMessage()."<br>";
		echo "В строке : ".$e->GetLine()."<br>";
		echo "В файле : ".$e->GetFile()."<br>";
	}
	echo "А код продолжается";
?> 


Работа с Git

Чтобы git  видел русское название файлов необходимо ввести параметр quotepath в секцию [core], установив его в false. 

$ ssh-keygen -t rsa -b 4096 -C "motobycom@tut.by" - сгенерировать Ssh ключ

quotepath = false 
git status - просмотр состояния
gitk - графическое отображение коммитов
- просмотр git log с переносом строк :набрать  - и потом "shift s"
- git diff --color-words - показывает изменения не отдельной строкой, а в коде

- git commit -aM (Добавляет все изменения в буфер и закомитить из все за раз) РАБОТАТЬ С ОСТОРОЖНОСТЬЮ НЕ ДОБАВЛЯЕТ УДАЛЁННЫЕ И НЕ ОТСЛЕЖИВАЕМЫЕ!
- ctrl+l - очистить историю
- git checkout <file> - вернуть непро staged (add) изменение из репозитория в рабочую папку
- git reset HEAD <file> - вернуть staged изменение, сделав его "красным"
- git commit --amend -m "комментарий" перекоммитить закомиченое изменение
- git checkout master - возврат головки на самый свежий коммит
- git revert <SHA коммита, который нужно отменить> - отмена всех изменений коммита
- git reset --soft или --mixed или --hard  <SHA коммита, на который нужно перейти>
- git clean -n - показывает неотслеживаемые файлы которые собирается удалить
- git clean -f - удаляет их

git config --global core.excludesfile C:\Users\Harnet\.git\.gitignore_global - настройки файла глобального игнорирования

git log --oneline  - показывает в одну строчку все логи
git log --since="год-месяц-день" - коммиты с определённой даты
git log --until="год-месяц-день" - коммиты до определённой даты
git log --until="3 days ago" - коммиты до определённой даты
!!!git log -p  - показывает что коммиты делали

git log --stat --summary --oneline -p <название файла> - какие изменения были сделаны в файле 

git log --graph - показывает ветки
git diff <sha> - показывает разницу между раб. дир и коммитом
git diff <sha> <file> - показывает разницу В ОТДЕЛЬНОМ ФАЙЛЕ между раб. дир и коммитом
git diff <sha>..<sha> - показывает разницу между двумя коммитами
gif diff --stat --summary <sha> - показывает список всех изменений во всех файлах

git branch - список всех бранчей
cat .git/HEAD - в каком бранче находится головка
ls -la .git/refs/heads -показывает все бранчи в папке
git branch <имя бранча> - создание нового бранча
git checkout <имя бранча> - переключает на выбранный бранч
git checkout -b <имя бранча> - создайт и переключает на бранч
git log --graph --oneline --decorate --all - показывает бранчи и изменения в них
git diff <имя бранча>..<имя бранча> - сравнение бранчей
git diff <имя бранча>..<имя бранча>^ - сравнение бранча и предков другого бранча
git branch --merged - показывает в каких бранчах есть все коммиты которые есть в другом
git branch -m <имя бранча><новое имя бранча> - переименнование бранча
git branch -d <имя бранча> - удаление бранча

echo $PS1 - показывает настройки "приглашения"(сообщения при вводе комманд)

Быстрое слияние возможно тогда, когда в мастере не было коммитов после создания бранча

git merge <бранч> - !!!стоЯть на мастере - БЫСТРОЕ СЛИЯНИЕ объединяет (накатывает изменения на мастер) бранч к мастером
git merge --no--ff <бранч-донор> - быстрое слияние с созданием коммита
git merge --abort - отмена слияния при конфликте слияния

git stash save "Сообщение" - положить изменения, которые мешают переключиться на бранчи в копилку
git stashe list - просмотр "копилки"
git stash show -p <stash@{0}> - показ изменений в копилке
git stash pop <stash@{0}> - отправят изменения из выбранной копилки в раб. дир и удаляет из копилки
git stash apply <stash@{0}> - отправят изменения из выбранной копилки в раб. дир и удаляет из копилки
git stash drop <stash@{0}> - удаление из копилки
gir stash clear - очищает копилку целиком

Удалённые репозитории
git remote - список всех удалённых репозиториев
git remote add <имя сервера> <url аккаунта на github> - создание сетевого репозитория
git remote -v - инфа по репозиторию
git remote rm <имя сетевого репозитория> - удалить репозиторий
git push -u <имя сетевого репозитория> - начать работу с удалённым репозиторием и команда отслеживать изненения в удалённом реп.
git push origin <имя бранча> - отправка ветки в удалённый репозитория, которая не будет отслеживаться
git branch --set-upstrem non_tracking origin/<имя неотслеживаемой ветки> - сделать ветку отслеживаемой 

git remote -r - покажет удалённые репозитории
git remote -a - покажет локальные и удалённые репозитории
git clone <url удалённого репозитория> - клонирование сетевого репозитория и именем как в том проекте и с бранчем по умолчанию
git clone <url удалённого репозитория> <имя> - клонирование сетевого репозитория с указанным именем
git clone -b <url удалённого репозитория> <имя> - клонирование определённого бранча из репозитория


git branch -r - ветки на удалённом репозитории
git branch -a - все бранчи, вкл удалённые
git fetch - актуализирует локальный репозиторий origin/master с удалённым репозиторием
git merge origin/master - слияние origin/master(который мы fetch) с master
git pull - переносит изменения с origin/master в master
git branch <название бранча> <origin/название удалённого бранча> - добавить в свои бранчи "удалённый" отслеживаемый бранч другого человека
git branch -b <название бранча> <origin/название удалённого бранча> - добавить в свои бранчи "удалённый" отслеживаемый бранч другого человека
git branch origin :<имя бранча> - удаление сетевого бранча
git push origin :<имя бранча> - удаление сетевого бранча
git push origin --delete <имя бранча> - удаление сетевого бранча (способ 2)
$ git remote update origin --prune - очищает несуществующие в сетевом репозитарии ветки, которые видны при "branch -r"

git config --global alias.st "status" - назначить синоним(алиас) для стандартной команды GIT
   Стандартные алиасы :
git config --global alias.co "checkout"
git config --global alias.ci "commit"
git config --global alias.br "branch"
git config --global alias.df "diff"
git config --global alias.dfs "diff --staged"
git config --global alias.logg "log --graph --decorate --all --abbrev-commit --oneline"






